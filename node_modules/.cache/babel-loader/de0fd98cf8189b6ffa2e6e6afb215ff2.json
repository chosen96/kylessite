{"ast":null,"code":"var _jsxFileName = \"/Users/kychri/Desktop/Personal/aws-kyle/src/Components/MouseTrail.js\";\nimport React, { Component } from 'react';\nimport Landing from './Landing';\n/* Mouse trail adapted from a jQuery Codepen by Bryan C https://codepen.io/bryjch/pen/QEoXwA */\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.lifetime = 0;\n  }\n\n}\n\nclass MouseTrail extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cHeight: 0,\n      cWidth: 0\n    };\n    this.canvas = React.createRef();\n\n    this.componentDidMount = () => {\n      // Set height and width on load because if set in state body isn't defined yet.\n      this.setState({\n        cHeight: document.body.clientHeight,\n        cWidth: document.body.clientWidth\n      });\n      window.addEventListener('resize', () => {\n        this.setState({\n          cHeight: document.body.clientHeight,\n          cWidth: document.body.clientWidth\n        });\n      }, false); // If the device supports cursors, start animation.\n\n      if (matchMedia('(pointer:fine)').matches) {\n        this.startAnimation();\n      }\n    };\n\n    this.startAnimation = () => {\n      const canvas = this.canvas.current;\n      const ctx = canvas.getContext('2d');\n      const points = [];\n\n      const addPoint = (x, y) => {\n        const point = new Point(x, y);\n        points.push(point);\n      };\n\n      document.addEventListener('mousemove', ({\n        clientX,\n        clientY\n      }) => {\n        addPoint(clientX - canvas.offsetLeft, clientY - canvas.offsetTop);\n      }, false);\n\n      const animatePoints = () => {\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        const duration = 0.7 * (1 * 1000) / 60; // Last 80% of a frame per point\n\n        for (let i = 0; i < points.length; ++i) {\n          const point = points[i];\n          let lastPoint;\n\n          if (points[i - 1] !== undefined) {\n            lastPoint = points[i - 1];\n          } else lastPoint = point;\n\n          point.lifetime += 1;\n\n          if (point.lifetime > duration) {\n            // If the point dies, remove it.\n            points.shift();\n          } else {\n            // Otherwise animate it:\n            // As the lifetime goes on, lifePercent goes from 0 to 1.\n            const lifePercent = point.lifetime / duration;\n            const spreadRate = 7 * (1 - lifePercent);\n            ctx.lineJoin = 'round';\n            ctx.lineWidth = spreadRate; // As time increases decrease r and b, increase g to go from purple to green.\n\n            const red = Math.floor(190 - 190 * lifePercent);\n            const green = 0;\n            const blue = Math.floor(210 + 210 * lifePercent);\n            ctx.strokeStyle = `rgb(${red},${green},${blue}`;\n            ctx.beginPath();\n            ctx.moveTo(lastPoint.x, lastPoint.y);\n            ctx.lineTo(point.x, point.y);\n            ctx.stroke();\n            ctx.closePath();\n          }\n        }\n\n        requestAnimationFrame(animatePoints);\n      };\n\n      animatePoints();\n    };\n\n    this.render = () => {\n      const _this$state = this.state,\n            cHeight = _this$state.cHeight,\n            cWidth = _this$state.cWidth;\n      return React.createElement(\"canvas\", {\n        ref: this.canvas,\n        width: cWidth,\n        height: cHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    };\n  }\n\n}\n\nexport default MouseTrail;","map":{"version":3,"sources":["/Users/kychri/Desktop/Personal/aws-kyle/src/Components/MouseTrail.js"],"names":["React","Component","Landing","Point","constructor","x","y","lifetime","MouseTrail","state","cHeight","cWidth","canvas","createRef","componentDidMount","setState","document","body","clientHeight","clientWidth","window","addEventListener","matchMedia","matches","startAnimation","current","ctx","getContext","points","addPoint","point","push","clientX","clientY","offsetLeft","offsetTop","animatePoints","clearRect","width","height","duration","i","length","lastPoint","undefined","shift","lifePercent","spreadRate","lineJoin","lineWidth","red","Math","floor","green","blue","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","requestAnimationFrame","render"],"mappings":"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","sourcesContent":["import  React, { Component } from  'react';\nimport Landing from './Landing';\n\n/* Mouse trail adapted from a jQuery Codepen by Bryan C https://codepen.io/bryjch/pen/QEoXwA */\n\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.lifetime = 0;\n  }\n}\n\nclass MouseTrail extends React.Component {\n  state = {\n    cHeight: 0,\n    cWidth: 0,\n  };\n\n  canvas = React.createRef();\n\n  componentDidMount = () => {\n    // Set height and width on load because if set in state body isn't defined yet.\n    this.setState({\n      cHeight: document.body.clientHeight,\n      cWidth: document.body.clientWidth,\n    });\n\n    window.addEventListener(\n      'resize',\n      () => {\n        this.setState({\n          cHeight: document.body.clientHeight,\n          cWidth: document.body.clientWidth,\n        });\n      },\n      false,\n    );\n\n    // If the device supports cursors, start animation.\n    if (matchMedia('(pointer:fine)').matches) {\n      this.startAnimation();\n    }\n  }\n\n  startAnimation = () => {\n    const canvas = this.canvas.current;\n    const ctx = canvas.getContext('2d');\n\n    const points = [];\n\n    const addPoint = (x, y) => {\n      const point = new Point(x, y);\n      points.push(point);\n    };\n\n    document.addEventListener('mousemove', ({ clientX, clientY }) => {\n      addPoint(clientX - canvas.offsetLeft, clientY - canvas.offsetTop);\n    }, false);\n\n    const animatePoints = () => {\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n      const duration = 0.7 * (1 * 1000) / 60; // Last 80% of a frame per point\n\n      for (let i = 0; i < points.length; ++i) {\n        const point = points[i];\n        let lastPoint;\n\n        if (points[i - 1] !== undefined) {\n          lastPoint = points[i - 1];\n        } else lastPoint = point;\n\n        point.lifetime += 1;\n\n        if (point.lifetime > duration) {\n          // If the point dies, remove it.\n          points.shift();\n        } else {\n          // Otherwise animate it:\n\n          // As the lifetime goes on, lifePercent goes from 0 to 1.\n          const lifePercent = (point.lifetime / duration);\n          const spreadRate = 7 * (1 - lifePercent);\n\n          ctx.lineJoin = 'round';\n          ctx.lineWidth = spreadRate;\n\n          // As time increases decrease r and b, increase g to go from purple to green.\n          const red = Math.floor(190 - (190 * lifePercent));\n          const green = 0;\n          const blue = Math.floor(210 + (210 * lifePercent));\n          ctx.strokeStyle = `rgb(${red},${green},${blue}`;\n\n          ctx.beginPath();\n\n          ctx.moveTo(lastPoint.x, lastPoint.y);\n          ctx.lineTo(point.x, point.y);\n\n          ctx.stroke();\n          ctx.closePath();\n        }\n      }\n      requestAnimationFrame(animatePoints);\n    };\n\n    animatePoints();\n  }\n\n  render = () => {\n    const { cHeight, cWidth } = this.state;\n    return (\n      <canvas ref={this.canvas} width={cWidth} height={cHeight} />\n    )\n  }\n}\n\nexport default MouseTrail;\n"]},"metadata":{},"sourceType":"module"}